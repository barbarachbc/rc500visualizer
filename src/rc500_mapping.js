// Full RC-500 mapping table, autogenerated from RC500_Config_Mapping.md

const PDL_OPTIONS = 'OFF, T1 REC/PLY, T2 REC/PLY, T1 R/P/S, T2 R/P/S, T1 R/P/S/CL, T2 R/P/S/CL, T1 MOM R/P, T2 MOM R/P, T1 PLY/STP, T2 PLY/STP, T1 P/S/CLR, T2 P/S/CLR, T1 STOP, T2 STOP, T1 STOP(TAP), T2 STOP(TAP), T1 STOP/CLR, T2 STOP/CLR, T1 STOP/T/C, T2 STOP/T/C, T1 CLEAR, T2 CLEAR, T1 UND/RED, T2 UND/RED, T1 REVERSE, T2 REVERSE, TRK SELECT, CUR REC/PLY, CUR R/P/S, CUR R/P/S/CL, CUR MOM R/P, CUR PLY/STP, CUR P/S/CLR, CUR STOP, CUR STP(TAP), CUR STP/CLR, CUR STP/T/C, CUR CLEAR, CUR UND/RED, CUR REVERSE, UNDO/REDO, ALL START, TAP TEMPO, LOOP FX, TR1 FX, TR2 FX, CUR TR FX, FX INC, FX DEC, RHYTHM P/S, RHYTHM PLAY, RHYTHM STOP, MEMORY INC, MEMORY DEC, MIC MUTE, EXTENT INC, EXTENT DEC';
const PDL_FUNC = { 
  notes: PDL_OPTIONS, 
  valueMap: (function(){ const arr = PDL_OPTIONS.split(','); const map={}; for(let i=0;i<arr.length;i++) map[i]=arr[i]; return map; })() }
;

const EXP_OPTIONS = 'OFF, T1 LEVEL1, T2 LEVEL1, T1 LEVEL2, T2 LEVEL2, CUR LEVEL1, CUR LEVEL2, TEMPO UP, TEMPO DOWN, FX CONTROL, RHYTHM LEV1, RHYTHM LEV2, MEMORY LEV1, MEMORY LEV2';
const EXP_FUNC = { 
  notes: EXP_OPTIONS, 
  valueMap: (function(){ const arr = EXP_OPTIONS.split(','); const map={}; for(let i=0;i<arr.length;i++) map[i]=arr[i]; return map; })() }
;


const ASSGN_SOURCE_OPTIONS = 'PEDAL1, PEDAL2, PEDAL3, EXP PEDAL, CTL1 PEDAL, CTL2 PEDAL, TR1 KNOB, TR2 KNOB, TR1 PLY/STOP, TR2 PLY/STOP, CUR TR CHG, SYNC START';
const ASSGN_TARGET_OPTIONS = 'T1 REC/PLY, T2 REC/PLY, T1 PLY/STP, T2 PLY/STP, T1 CLEAR, T2 CLEAR, T1 UND/RED, T2 UND/RED, T1 REVERSE, T2 REVERSE, T1 1SHOT, T2 1SHOT, T1 LEVEL1, T2 LEVEL1, T1 LEVEL2, T2 LEVEL2, T1 PAN, T2 PAN, T1 START, T2 START, T1 STOP, T2 STOP, T1 LOOPS, T2 LOOPS, T1 TEMPO.S, T2 TEMPO.S, T1 INPUT, T2 INPUT, T1 OUTPUT, T2 OUTPUT, TRK SELECT, CUR REC/PLY, CUR CLEAR, CUR UND/RED, CUR REVERSE, CUR 1SHOT, CUR LEVEL1, CUR LEVEL2, CUR PAN, CUR START, CUR STOP, CUR LOOPS, CUR TEMPO.S, CUR INPUT, CUR OUTPUT, UNDO/REDO, ALL START, TAP TEMPO, TEMPO UP, TEMPO DOWN, TEMPO, DUB MODE, REC ACTION, QUANTIZE, AUTO REC, A.REC SENS, A.REC SRC, LOOP LENGTH, PLAY MODE, SINGL CHNGE, FADE TIME, ALL ST TRK, TRK CHAIN, LOOP FX, TR1 FX, TR2 FX, CUR TR FX, FX TYPE, FX INC, FX DEC, FX CONTROL, RHYTHM P/S, RHYTHM PLAY, RHYTHM STOP, RHY LEVEL1, RHY LEVEL2, RHY REVERB, RHY PATTERN, VARIATION, VAR.CHANGE, KIT, RHY START, RHY STOP, REC COUNT, PLAY COUNT, RHY FILL, RHY PART1, RHY PART2, RHY PART3, RHY PART4, MEMORY INC, MEMORY DEC, TONE LOW, TONE HIGH, MEMORY LEV1, MEMORY LEV2';

const CC_MAPPING = {
  notes: 'CC #1–31, CC #64–95',
  valueMap: (function(){ const arr = [...Array(31).keys()]; const map={}; for(let i=0;i<arr.length;i++) { map[i+1]='CC#'+(i+1); map[i+32]='CC#'+(i+64); } return map; })() }
;

const ASSGN_TARGET_FUNC = { 
  notes: ASSGN_TARGET_OPTIONS + ', ' + CC_MAPPING.notes, 
  valueMap: (function(){ const arr = ASSGN_TARGET_OPTIONS.split(','); const map={}; for(let i=0;i<arr.length;i++) map[i]=arr[i]; const cnt = Object.keys(CC_MAPPING.valueMap).length; for(let i=0;i<cnt;i++) map[i+arr.length]=CC_MAPPING.valueMap[i+1]; return map; })() }
;

const ASSGN_SOURCE_FUNC = { 
  notes: ASSGN_SOURCE_OPTIONS + ', ' + CC_MAPPING.notes, 
  valueMap: (function(){ const arr = ASSGN_SOURCE_OPTIONS.split(','); const map={}; for(let i=0;i<arr.length;i++) map[i]=arr[i]; const cnt = Object.keys(CC_MAPPING.valueMap).length; for(let i=0;i<cnt;i++) map[i+arr.length]=CC_MAPPING.valueMap[i+1]; return map; })() }
;

export const RC500_MAPPING = [
  // --- NAME section ---
  { section: 'NAME', param: 'C01–C12', ui: 'NAME', display: 'Memory Name', uiSection: 'NAME', notes: 'ASCII codes, concat', valueType: 'unknown' },

  // --- TRACK1/2 section ---
  { section: 'TRACK1', param: 'Rev', ui: 'REVERSE', display: 'Reverse', uiSection: 'TRACK 1', notes: '0=OFF, 1=ON', valueType: 'onoff', description: 'Specifies conventional playback (OFF) or reverse playback (ON). When REVERSE is set to “ON,” you won’t be able to switch to overdubbing after a recording has been completed.' },
  { section: 'TRACK1', param: 'PlyLvl', ui: 'LEVEL', display: 'Track Level', uiSection: 'TRACK 1', notes: '0–200', valueType: 'number', description: 'Adjusts the playback level of the tracks. You can also use the [TRACK 1] and [TRACK 2] sliders to adjust the playback level.' },
  { section: 'TRACK1', param: 'Pan', ui: 'PAN', display: 'Stereo Pan', uiSection: 'TRACK 1', notes: 'L50–CENTER–R50', valueType: 'pan', description: 'Specifies the stereo position (pan) of the track.' },
  { section: 'TRACK1', param: 'One', ui: '1SHOT', display: 'One Shot', uiSection: 'TRACK 1', notes: '0=OFF, 1=ON', valueType: 'onoff', description: 'Specifies whether the track is played once (one shot) or loops.' },
  { section: 'TRACK1', param: 'LoopFx', ui: 'LOOP FX', display: 'Loop FX', uiSection: 'TRACK 1', notes: '0=OFF, 1=ON', valueType: 'onoff', description: 'Specifies whether to apply LOOP FX (ON) or not (OFF).' },
  { section: 'TRACK1', param: 'StrtMod', ui: 'START', display: 'Start Mode', uiSection: 'TRACK 1', notes: '0=IMMEDIATE, 1=FADE IN', valueType: 'immediatefade', description: 'Specifies how playback starts: immediately or with a fade-in.' },
  { section: 'TRACK1', param: 'StpMod', ui: 'STOP', display: 'Stop Mode', uiSection: 'TRACK 1', notes: '0=IMMEDIATE, 1=FADE OUT, 2=LOOP END', valueType: 'immediatefadeoutloopend', description: 'Specifies how playback stops: immediately, with a fade-out, or at the end of the loop.' },
  { section: 'TRACK1', param: 'Measure', ui: 'MEASURE', display: 'Measure Count', uiSection: 'TRACK 1', notes: 'AUTO, FREE, 1MEAS–', valueType: 'measure', description: 'Specifies the number of measures for the track. AUTO sets automatically; FREE allows any length.' },
  { section: 'TRACK1', param: 'LoopSync', ui: 'LOOPS (LOOP SYNC)', display: 'Loop Sync', uiSection: 'TRACK 1', notes: 'OFF, ON', valueType: 'onoff', description: 'Synchronizes the playback of tracks. ON keeps tracks in sync.' },
  { section: 'TRACK1', param: 'TempoSync', ui: 'TEMPO.S (TEMPO SYNC)', display: 'Tempo Sync', uiSection: 'TRACK 1', notes: 'OFF, ON', valueType: 'onoff', description: 'Synchronizes track tempo with the master tempo.' },
  { section: 'TRACK1', param: 'Input', ui: 'INPUT', display: 'Input Select', uiSection: 'TRACK 1', notes: 'ALL, MIC IN, INST IN, INST IN-A, INST IN-B, MIC/INST', valueType: 'input', description: 'Selects which input(s) are recorded to this track.' },
  { section: 'TRACK1', param: 'Output', ui: 'OUTPUT', display: 'Output Route', uiSection: 'TRACK 1', notes: 'ALL, OUT-A, OUT-B', valueType: 'output', description: 'Selects which output(s) this track is sent to.' },
  { section: 'TRACK1', param: 'MeasMod', ui: '', display: 'Measure Mode', uiSection: 'TRACK 1', notes: '0=Auto, 1=Manual', valueType: 'automanual', description: 'AUTO sets measure count automatically; MANUAL lets you specify the number.' },
  { section: 'TRACK1', param: 'MeasLen', ui: '', display: 'Measure Length', uiSection: 'TRACK 1', notes: 'Integer', valueType: 'number', description: 'Specifies the length of a measure for this track.' },
  { section: 'TRACK1', param: 'MeasBtLp', ui: '', display: 'Beat Loop', uiSection: 'TRACK 1', notes: '0=Off, 1=On', valueType: 'onoff', description: 'Enables or disables beat looping.' },
  { section: 'TRACK1', param: 'RecTmp', ui: '', display: 'Record Tempo', uiSection: 'TRACK 1', notes: 'BPM × 10 (e.g., 1200 = 120.0 BPM)', valueType: 'tempo', description: 'Tempo value at the time of recording, in BPM × 10.' },
  { section: 'TRACK1', param: 'WavStat', ui: '', display: 'Wave Status', uiSection: 'TRACK 1', notes: '0=Empty, 1=Recorded', valueType: 'emptyrecorded', description: 'Indicates if a phrase is recorded (1) or empty (0).' },
  { section: 'TRACK1', param: 'WavLen', ui: '', display: 'Wave Length', uiSection: 'TRACK 1', notes: 'Samples/frames', valueType: 'number', description: 'Length of the recorded audio in samples or frames.' },
  // TRACK2 is identical structure
  { section: 'TRACK2', param: 'Rev', ui: 'REVERSE', display: 'Reverse', uiSection: 'TRACK 2', notes: '0=OFF, 1=ON', valueType: 'onoff', description: 'Specifies conventional playback (OFF) or reverse playback (ON). When REVERSE is set to “ON,” you won’t be able to switch to overdubbing after a recording has been completed.' },
  { section: 'TRACK2', param: 'PlyLvl', ui: 'LEVEL', display: 'Track Level', uiSection: 'TRACK 2', notes: '0–200', valueType: 'number', description: 'Adjusts the playback level of the track.' },
  { section: 'TRACK2', param: 'Pan', ui: 'PAN', display: 'Stereo Pan', uiSection: 'TRACK 2', notes: 'L50–CENTER–R50', valueType: 'pan', description: 'Specifies the stereo position (pan) of the track.' },
  { section: 'TRACK2', param: 'One', ui: '1SHOT', display: 'One Shot', uiSection: 'TRACK 2', notes: '0=OFF, 1=ON', valueType: 'onoff', description: 'Specifies whether the track is played once (one shot) or loops.' },
  { section: 'TRACK2', param: 'LoopFx', ui: 'LOOP FX', display: 'Loop FX', uiSection: 'TRACK 2', notes: '0=OFF, 1=ON', valueType: 'onoff', description: 'Specifies whether to apply LOOP FX (ON) or not (OFF).' },
  { section: 'TRACK2', param: 'StrtMod', ui: 'START', display: 'Start Mode', uiSection: 'TRACK 2', notes: '0=IMMEDIATE, 1=FADE IN', valueType: 'immediatefade', description: 'Specifies how playback starts: immediately or with a fade-in.' },
  { section: 'TRACK2', param: 'StpMod', ui: 'STOP', display: 'Stop Mode', uiSection: 'TRACK 2', notes: '0=IMMEDIATE, 1=FADE OUT, 2=LOOP END', valueType: 'immediatefadeoutloopend', description: 'Specifies how playback stops: immediately, with a fade-out, or at the end of the loop.' },
  { section: 'TRACK2', param: 'Measure', ui: 'MEASURE', display: 'Measure Count', uiSection: 'TRACK 2', notes: 'AUTO, FREE, 1MEAS–', valueType: 'measure', description: 'Specifies the number of measures for the track. AUTO sets automatically; FREE allows any length.' },
  { section: 'TRACK2', param: 'LoopSync', ui: 'LOOPS (LOOP SYNC)', display: 'Loop Sync', uiSection: 'TRACK 2', notes: 'OFF, ON', valueType: 'onoff', description: 'Synchronizes the playback of tracks. ON keeps tracks in sync.' },
  { section: 'TRACK2', param: 'TempoSync', ui: 'TEMPO.S (TEMPO SYNC)', display: 'Tempo Sync', uiSection: 'TRACK 2', notes: 'OFF, ON', valueType: 'onoff', description: 'Synchronizes track tempo with the master tempo.' },
  { section: 'TRACK2', param: 'Input', ui: 'INPUT', display: 'Input Select', uiSection: 'TRACK 2', notes: 'ALL, MIC IN, INST IN, INST IN-A, INST IN-B, MIC/INST', valueType: 'input', description: 'Selects which input(s) are recorded to this track.' },
  { section: 'TRACK2', param: 'Output', ui: 'OUTPUT', display: 'Output Route', uiSection: 'TRACK 2', notes: 'ALL, OUT-A, OUT-B', valueType: 'output', description: 'Selects which output(s) this track is sent to.' },
  { section: 'TRACK2', param: 'MeasMod', ui: '', display: 'Measure Mode', uiSection: 'TRACK 2', notes: '0=Auto, 1=Manual', valueType: 'automanual', description: 'AUTO sets measure count automatically; MANUAL lets you specify the number.' },
  { section: 'TRACK2', param: 'MeasLen', ui: '', display: 'Measure Length', uiSection: 'TRACK 2', notes: 'Integer', valueType: 'number', description: 'Specifies the length of a measure for this track.' },
  { section: 'TRACK2', param: 'MeasBtLp', ui: '', display: 'Beat Loop', uiSection: 'TRACK 2', notes: '0=Off, 1=On', valueType: 'onoff', description: 'Enables or disables beat looping.' },
  { section: 'TRACK2', param: 'RecTmp', ui: '', display: 'Record Tempo', uiSection: 'TRACK 2', notes: 'BPM × 10 (e.g., 1200 = 120.0 BPM)', valueType: 'tempo', description: 'Tempo value at the time of recording, in BPM × 10.' },
  { section: 'TRACK2', param: 'WavStat', ui: '', display: 'Wave Status', uiSection: 'TRACK 2', notes: '0=Empty, 1=Recorded', valueType: 'emptyrecorded', description: 'Indicates if a phrase is recorded (1) or empty (0).' },
  { section: 'TRACK2', param: 'WavLen', ui: '', display: 'Wave Length', uiSection: 'TRACK 2', notes: 'Samples/frames', valueType: 'number', description: 'Length of the recorded audio in samples or frames.' },

  // --- MASTER section (REC/PLAY split) ---
  { section: 'MASTER', param: 'Tempo', ui: '', display: 'Tempo', uiSection: 'REC', notes: 'BPM × 10 (e.g., 1200 = 120.0 BPM)', valueType: 'tempo', description: 'Master tempo for the memory, in BPM × 10.' },
  { section: 'MASTER', param: 'DubMode', ui: 'DUB MODE', display: 'Dub Mode', uiSection: 'REC', notes: 'OVERDUB, REPLACE', valueType: 'dubmode', description: 'Sets overdub (layer) or replace (overwrite) mode for recording.' },
  { section: 'MASTER', param: 'RecAction', ui: 'REC ACTION', display: 'Rec Action', uiSection: 'REC', notes: 'REC→DUB, REC→PLAY', valueType: 'recaction', description: 'Determines what happens after recording: go to overdub or directly to playback.' },
  { section: 'MASTER', param: 'RecQuantize', ui: 'QUANTIZE', display: 'Quantize', uiSection: 'REC', notes: 'OFF, MEASURE', valueType: 'recquantize', description: 'Aligns recording start/end to measure boundaries if enabled.' },
  { section: 'MASTER', param: 'AutoRec', ui: 'AUTO REC', display: 'Auto Rec', uiSection: 'REC', notes: 'OFF, ON', valueType: 'onoff', description: 'Enables automatic recording when input exceeds threshold.' },
  { section: 'MASTER', param: 'AutoRecSens', ui: 'A.REC SENS', display: 'Auto Rec Sensitivity', uiSection: 'REC', notes: '1–100', valueType: 'number', description: 'Sensitivity threshold for auto recording.' },
  { section: 'MASTER', param: 'AutoRecSrc', ui: 'A.REC SRC', display: 'Auto Rec Source', uiSection: 'REC', notes: 'ALL, MIC IN, INST, INST-A, INST-B', valueType: 'input', description: 'Selects the input source for auto recording trigger.' },
  { section: 'MASTER', param: 'PlayMode', ui: 'PLAY MODE', display: 'Play Mode', uiSection: 'PLAY', notes: 'MULTI, SINGLE', valueType: 'playmode', description: 'MULTI: both tracks play independently. SINGLE: only one track plays at a time.' },
  { section: 'MASTER', param: 'SinglPlayeChange', ui: 'SINGL CHNGE', display: 'Single Change', uiSection: 'PLAY', notes: 'LOOP END', valueType: 'singleplaychange', description: 'Changes track at loop end when in SINGLE play mode.' },
  { section: 'MASTER', param: 'FadeTime', ui: 'FADE TIME', display: 'Fade Time', uiSection: 'PLAY', notes: '𝅘𝅥𝅯, ♪, ♩, 𝅗𝅥, 1MEAS–2MEAS–64MEAS', valueType: 'fadetime', description: 'Sets the fade-in/out time for track start/stop.' },
  { section: 'MASTER', param: 'AllStart', ui: 'ALL START', display: 'All Start', uiSection: 'PLAY', notes: 'ALL, TRACK1, TRACK2', valueType: 'allstart', description: 'Specifies which tracks start when ALL START is triggered.' },
  { section: 'MASTER', param: 'TrackChain', ui: 'TRK CHAIN', display: 'Track Chain', uiSection: 'PLAY', notes: 'PARALLEL, SERIES', valueType: 'trackchain', description: 'PARALLEL: tracks play together. SERIES: tracks play in sequence.' },
  { section: 'MASTER', param: 'CurrentTrack', ui: '', display: 'Current Track (RC0 only)', uiSection: 'PLAY', notes: '0=TRK1, 1=TRK2 (RC0 only)', valueType: 'trk1or2', description: 'Indicates selected track for current memory (RC0 only).' },
  { section: 'MASTER', param: 'AllTrackSel', ui: '', display: 'All Track Select (RC0 only)', uiSection: 'PLAY', notes: '0=Off, 1=On (RC0 only)', valueType: 'onoff', description: 'If ON, all tracks are selected for operation (RC0 only).' },
  { section: 'MASTER', param: 'Level', ui: 'LEVEL', display: 'Level', uiSection: 'PLAY', notes: '0–100–200', valueType: 'number', description: 'Overall output level for the memory.' },
  { section: 'MASTER', param: 'LpMod', ui: 'LOOP MODE', display: 'Loop Mode', uiSection: 'PLAY', notes: 'OFF, ON', valueType: 'onoff', description: 'Enables or disables loop mode for tracks.' },
  { section: 'MASTER', param: 'LpLen', ui: 'LOOP LENGTH', display: 'Loop Length', uiSection: 'PLAY', notes: 'AUTO, 1–25362', valueType: 'number', description: 'Specifies the length of the loop in measures.' },
  { section: 'MASTER', param: 'TrkMod', ui: 'TRACK MODE', display: 'Track Mode', uiSection: 'PLAY', notes: 'OFF, ON', valueType: 'onoff', description: 'Enables or disables track mode for advanced operations.' },
  { section: 'MASTER', param: 'Sync', ui: 'SYNC', display: 'Sync', uiSection: 'PLAY', notes: '0=OFF, 1=ON', valueType: 'onoff', description: 'Synchronizes playback/recording with rhythm or other tracks.' },

  // --- LOOPFX section ---
  { section: 'LOOPFX', param: 'Sw', ui: 'LOOP FX', display: 'Loop FX On/Off', uiSection: 'LOOP FX', notes: 'OFF, ON', valueType: 'onoff', description: 'Turns the Loop FX section on or off for this memory.' },
  { section: 'LOOPFX', param: 'FxType', ui: 'TYPE', display: 'FX Type', uiSection: 'LOOP FX', notes: 'SCATTER1–4, REPEAT1–3, SHIFT1–2, VINYL FLICK', valueType: 'fxType', description: 'Selects the effect type for Loop FX (scatter, repeat, shift, vinyl flick).' },

  { section: 'LOOPFX', param: 'RepeatLength', ui: 'REPT LEN', display: 'Repeat Length', uiSection: 'LOOP FX', notes: 'THRU, 𝅝, 𝅗𝅥, ♩, ♪, 𝅘𝅥𝅯, 𝅘𝅥𝅰', valueType: 'noteLength', valueMap: {
    '0': 'THRU', '1': '\uD834\uDD5D', '2': '\uD834\uDD5E', '3': '\u2669', '4': '\u266A', '5': '\u266B', '6': '\u266C'
  }, description: 'Sets the note length for the repeat FX (musical time division).' },

  { section: 'LOOPFX', param: 'ShiftShift', ui: 'SHIFT', display: 'Shift Length', uiSection: 'LOOP FX', notes: 'THRU, 𝅘𝅥𝅯, ♪, ♩, 𝅗𝅥, 𝅝', valueType: 'noteLength', valueMap: {
    '0': 'THRU', '1': '\u266B', '2': '\u266A', '3': '\u2669', '4': '\uD834\uDD5E', '5': '\uD834\uDD5D'
  }, description: 'Sets the note length for the shift FX (musical time division).' },

  { section: 'LOOPFX', param: 'ScatterLength', ui: 'SCAT LEN', display: 'Scatter Length', uiSection: 'LOOP FX', notes: 'THRU, 𝅗𝅥, ♩, ♪, 𝅘𝅥𝅯', valueType: 'noteLength', valueMap: {
    '0': 'THRU', '1': '\uD834\uDD5E', '2': '\u2669', '3': '\u266A', '4': '\u266B'
  }, description: 'Sets the note length for the scatter FX (musical time division).' },

  { section: 'LOOPFX', param: 'VinylFlickFlick', ui: 'FLICK', display: 'Vinyl Flick', uiSection: 'LOOP FX', notes: '0–100 (default 50)', valueType: 'percent', valueFormat: 'percent', description: 'Sets the intensity of the vinyl flick FX (0–100%).' },

  // --- RHYTHM section ---
  { section: 'RHYTHM', param: 'Level', ui: 'LEVEL', display: 'Rhythm Level', uiSection: 'RHYTHM', notes: '0–200', valueType: 'number', description: 'Adjusts the playback level of the rhythm section.' },
  { section: 'RHYTHM', param: 'Reverb', ui: 'REVERB', display: 'Rhythm Reverb', uiSection: 'RHYTHM', notes: '0–100', valueType: 'number', description: 'Amount of reverb applied to the rhythm sound.' },
  { section: 'RHYTHM', param: 'Pattern', ui: 'PATTERN', display: 'Rhythm Pattern', uiSection: 'RHYTHM', notes: 'SimpleBeat1–4, GrooveBeat1–7, Rock1–4, Funk1–4, Shuffle1–5, Swing1–5, SideStick1–5, PercusBeat1–4, LatinBeat1–4, Conga1–3, Bossa1–2, Samba1–2, DanceBeat1–4, Metronome1–4, Blank', valueType: 'pattern', valueMap: {
    '0': 'SimpleBeat1', '1': 'SimpleBeat2', '2': 'SimpleBeat3', '3': 'SimpleBeat4',
    '4': 'GrooveBeat1', '5': 'GrooveBeat2', '6': 'GrooveBeat3', '7': 'GrooveBeat4', '8': 'GrooveBeat5', '9': 'GrooveBeat6', '10': 'GrooveBeat7',
    '11': 'Rock1', '12': 'Rock2', '13': 'Rock3', '14': 'Rock4',
    '15': 'Funk1', '16': 'Funk2', '17': 'Funk3', '18': 'Funk4',
    '19': 'Shuffle1', '20': 'Shuffle2', '21': 'Shuffle3', '22': 'Shuffle4', '23': 'Shuffle5',
    '24': 'Swing1', '25': 'Swing2', '26': 'Swing3', '27': 'Swing4', '28': 'Swing5',
    '29': 'SideStick1', '30': 'SideStick2', '31': 'SideStick3', '32': 'SideStick4', '33': 'SideStick5',
    '34': 'PercusBeat1', '35': 'PercusBeat2', '36': 'PercusBeat3', '37': 'PercusBeat4',
    '38': 'LatinBeat1', '39': 'LatinBeat2', '40': 'LatinBeat3', '41': 'LatinBeat4',
    '42': 'Conga1', '43': 'Conga2', '44': 'Conga3',
    '45': 'Bossa1', '46': 'Bossa2', '47': 'Samba1', '48': 'Samba2',
    '49': 'DanceBeat1', '50': 'DanceBeat2', '51': 'DanceBeat3', '52': 'DanceBeat4',
    '53': 'Metronome1', '54': 'Metronome2', '55': 'Metronome3', '56': 'Metronome4',
    '57': 'Blank'
  } },
  { section: 'RHYTHM', param: 'Variation', ui: 'VARIATION', display: 'Pattern Variation', uiSection: 'RHYTHM', notes: 'A, B', valueType: 'variation', valueMap: { '0': 'A', '1': 'B' }, description: 'Selects between two variations (A/B) for the current rhythm pattern.' },
  { section: 'RHYTHM', param: 'VariationChange', ui: 'VAR.CHANGE', display: 'Variation Change', uiSection: 'RHYTHM', notes: 'MEASURE, LOOP END', valueType: 'variationchange', valueMap: { '0': 'MEASURE', '1': 'LOOP END' }, description: 'Determines when the variation changes: at the next measure or loop end.' },
  { section: 'RHYTHM', param: 'Kit', ui: 'KIT', display: 'Drum Kit', uiSection: 'RHYTHM', notes: 'Studio, Live, Light, Heavy, Rock, Metal, Jazz, Brush, Cajon, Drum&Bass, R&B, Dance, Techno, Dance Beats, HipHop, 808+909', valueType: 'kit', valueMap: {
    '0': 'Studio', '1': 'Live', '2': 'Light', '3': 'Heavy', '4': 'Rock', '5': 'Metal', '6': 'Jazz', '7': 'Brush', '8': 'Cajon', '9': 'Drum&Bass', '10': 'R&B', '11': 'Dance', '12': 'Techno', '13': 'Dance Beats', '14': 'HipHop', '15': '808+909'
  } },
  { section: 'RHYTHM', param: 'Beat', ui: 'BEAT', display: 'Rhythm Beat', uiSection: 'RHYTHM', notes: '2/4, 3/4, 4/4, 5/4, 6/4, 7/4, 5/8, 6/8, 7/8, 9/8, 11/8, 12/8, 13/8, 15/8', valueType: 'beat', valueMap: {
    '0': '2/4', '1': '3/4', '2': '4/4', '3': '5/4', '4': '6/4', '5': '7/4', '6': '5/8', '7': '6/8', '8': '7/8', '9': '9/8', '10': '11/8', '11': '12/8', '12': '13/8', '13': '15/8'
  }, description: 'Time signature for the rhythm pattern.' },
  { section: 'RHYTHM', param: 'Fill', ui: 'RHY FILL', display: 'Rhythm Fill', uiSection: 'RHYTHM', notes: 'OFF, ON', valueType: 'onoff', valueMap: { '0': 'OFF', '1': 'ON' }, description: 'Enables or disables rhythm fill-in (short drum break).' },
  { section: 'RHYTHM', param: 'Part1', ui: '', display: 'Rhythm Part 1', uiSection: 'RHYTHM', notes: 'OFF, ON', valueType: 'onoff', valueMap: { '0': 'OFF', '1': 'ON' }, description: 'Turns rhythm part 1 on or off for the pattern.' },
  { section: 'RHYTHM', param: 'Part2', ui: '', display: 'Rhythm Part 2', uiSection: 'RHYTHM', notes: 'OFF, ON', valueType: 'onoff', valueMap: { '0': 'OFF', '1': 'ON' }, description: 'Turns rhythm part 2 on or off for the pattern.' },
  { section: 'RHYTHM', param: 'Part3', ui: '', display: 'Rhythm Part 3', uiSection: 'RHYTHM', notes: 'OFF, ON', valueType: 'onoff', valueMap: { '0': 'OFF', '1': 'ON' }, description: 'Turns rhythm part 3 on or off for the pattern.' },
  { section: 'RHYTHM', param: 'Part4', ui: '', display: 'Rhythm Part 4', uiSection: 'RHYTHM', notes: 'OFF, ON', valueType: 'onoff', valueMap: { '0': 'OFF', '1': 'ON' }, description: 'Turns rhythm part 4 on or off for the pattern.' },
  { section: 'RHYTHM', param: 'RecCount', ui: 'REC COUNT', display: 'Record Count-in', uiSection: 'RHYTHM', notes: 'OFF, 1MEAS', valueType: 'countin', valueMap: { '0': 'OFF', '1': '1MEAS' }, description: 'Adds a one-measure count-in before recording starts.' },
  { section: 'RHYTHM', param: 'PlayCount', ui: 'PLAY COUNT', display: 'Play Count-in', uiSection: 'RHYTHM', notes: 'OFF, 1MEAS', valueType: 'countin', valueMap: { '0': 'OFF', '1': '1MEAS' }, description: 'Adds a one-measure count-in before playback starts.' },
  { section: 'RHYTHM', param: 'Start', ui: 'START', display: 'Rhythm Start', uiSection: 'RHYTHM', notes: 'LOOP START, REC END, BEFORE LOOP', valueType: 'rhythmstart', valueMap: { '0': 'LOOP START', '1': 'REC END', '2': 'BEFORE LOOP' }, description: 'Determines when rhythm playback starts relative to loop/recording.' },
  { section: 'RHYTHM', param: 'Stop', ui: 'STOP', display: 'Rhythm Stop', uiSection: 'RHYTHM', notes: 'OFF, LOOP STOP, REC END', valueType: 'rhythmstop', valueMap: { '0': 'OFF', '1': 'LOOP STOP', '2': 'REC END' }, description: 'Determines when rhythm playback stops.' },
  { section: 'RHYTHM', param: 'ToneLow', ui: 'TONE LOW', display: 'Rhythm Tone Low', uiSection: 'RHYTHM', notes: '–10 to 10 (default 0)', valueType: 'number', description: 'Adjusts the low-frequency tone of the rhythm.' },
  { section: 'RHYTHM', param: 'ToneHigh', ui: 'TONE HIGH', display: 'Rhythm Tone High', uiSection: 'RHYTHM', notes: '–10 to 10 (default 0)', valueType: 'number', description: 'Adjusts the high-frequency tone of the rhythm.' },
  { section: 'RHYTHM', param: 'State', ui: '', display: 'Rhythm State', uiSection: 'RHYTHM', notes: 'Stopped, Playing', valueType: 'state', valueMap: { '0': 'Stopped', '1': 'Playing' }, description: 'Current playback state of the rhythm section.' },

  // --- CTL section ---
  { section: 'CTL', param: 'Pedal1', ui: 'PDL1 FUNC', display: 'Pedal 1 Function', uiSection: 'CTL', notes: PDL_FUNC.notes, valueType: 'pedal', valueMap: PDL_FUNC.valueMap, description: 'Function assigned to the device’s left footswitch (REC/PLAY).' },
  { section: 'CTL', param: 'Pedal2', ui: 'PDL2 FUNC', display: 'Pedal 2 Function', uiSection: 'CTL', notes: PDL_FUNC.notes, valueType: 'pedal', valueMap: PDL_FUNC.valueMap, description: 'Function assigned to the device’s center footswitch (STOP).' },
  { section: 'CTL', param: 'Pedal3', ui: 'PDL3 FUNC', display: 'Pedal 3 Function', uiSection: 'CTL', notes: PDL_FUNC.notes, valueType: 'pedal', valueMap: PDL_FUNC.valueMap, description: 'Function assigned to the device’s right footswitch (TRACK SELECT).' },
  { section: 'CTL', param: 'Ctl1', ui: 'CTL1 FUNC', display: 'CTL1 Function', uiSection: 'CTL', notes: PDL_FUNC.notes, valueType: 'pedal', valueMap: PDL_FUNC.valueMap, description: 'Function assigned to the external pedal - footswitch 1 (if connected (CTL1,2/EXP)).' },
  { section: 'CTL', param: 'Ctl2', ui: 'CTL2 FUNC', display: 'CTL2 Function', uiSection: 'CTL', notes: PDL_FUNC.notes, valueType: 'pedal', valueMap: PDL_FUNC.valueMap, description: 'Function assigned to the external pedal - footswitch 2 (if connected (CTL1,2/EXP)).' },
  { section: 'CTL', param: 'Exp', ui: 'EXP FUNC', display: 'Expression Pedal', uiSection: 'CTL', notes: EXP_FUNC.notes, valueType: 'exp', valueMap: EXP_FUNC.valueMap, description: 'Function or parameter assigned to the external expression pedal (if connected (CTL1,2/EXP)).' },
];
// --- ASSIGN1–8 sections ---
for (let i = 1; i <= 8; i++) {
  RC500_MAPPING.push(
    { section: `ASSIGN${i}`, param: 'Sw', ui: `ASSIGN${i} Sw`, display: 'Assign Switch', uiSection: `ASSIGN${i}`, notes: 'OFF, ON', valueType: 'onoff', valueMap: { '0': 'OFF', '1': 'ON' }, description: 'Turns the assign on or off for this memory.' },
    { section: `ASSIGN${i}`, param: 'Source', ui: `ASSIGN${i} Source`, display: 'Assign Source', uiSection: `ASSIGN${i}`, notes: ASSGN_SOURCE_FUNC.notes, valueType: 'assignsource', valueMap: ASSGN_SOURCE_FUNC.valueMap, description: 'Specifies the physical control or MIDI CC that triggers this assign.' },
    { section: `ASSIGN${i}`, param: 'SourceMode', ui: `ASSIGN${i} SRC MODE`, display: 'Assign Source Mode', uiSection: `ASSIGN${i}`, notes: 'MOMENT, TOGGLE', valueType: 'sourcemode', valueMap: { '0': 'MOMENT', '1': 'TOGGLE' }, description: 'How the assign source behaves: MOMENT (active while held) or TOGGLE (switches state).' },
    { section: `ASSIGN${i}`, param: 'Target', ui: `ASSIGN${i} Target`, display: 'Assign Target', uiSection: `ASSIGN${i}`, notes: ASSGN_TARGET_FUNC.notes, valueType: 'assigntarget', valueMap: ASSGN_TARGET_FUNC.valueMap, description: 'The parameter or function to be controlled by this assign.' },
    { section: `ASSIGN${i}`, param: 'TargetMin', ui: `ASSIGN${i} TargetMin`, display: 'Assign Target Min', uiSection: `ASSIGN${i}`, notes: 'Integer', valueType: 'number', description: 'Minimum value sent to the target when assign is triggered.' },
    { section: `ASSIGN${i}`, param: 'TargetMax', ui: `ASSIGN${i} TargetMax`, display: 'Assign Target Max', uiSection: `ASSIGN${i}`, notes: 'Integer', valueType: 'number', description: 'Maximum value sent to the target when assign is triggered.' }
  );
}